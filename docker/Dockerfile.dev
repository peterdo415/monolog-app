# ── Dockerfile.dev ──
#
# マルチステージ構成で依存を一度だけ解決し、
# API と Web をそれぞれのターゲットで起動します。

### 1) 依存解決ステージ ###
FROM node:20-alpine AS deps
WORKDIR /app

RUN apk add --no-cache curl ca-certificates unzip procps bash

# Bun CLI をインストール（アーキテクチャ自動判定でAlpine用バイナリを展開）
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
      BUN_URL="https://github.com/oven-sh/bun/releases/latest/download/bun-linux-x64-musl.zip"; \
    elif [ "$ARCH" = "aarch64" ]; then \
      BUN_URL="https://github.com/oven-sh/bun/releases/latest/download/bun-linux-aarch64-musl.zip"; \
    else \
      echo "Unsupported architecture: $ARCH" && exit 1; \
    fi && \
    curl -fsSL $BUN_URL -o bun.zip && \
    unzip bun.zip -d /usr/local/bin && \
    mv /usr/local/bin/bun-linux-*/bun /usr/local/bin/bun && \
    chmod +x /usr/local/bin/bun && \
    rm -rf bun.zip /usr/local/bin/bun-linux-*

ENV PATH="/root/.bun/bin:$PATH"

# pnpmをインストール
RUN corepack enable && corepack prepare pnpm@10.10.0 --activate

# モノレポのルート package / lock / workspace 定義と全ディレクトリをコピー
COPY ../apps ./apps
COPY ../packages ./packages
COPY ../package.json .
COPY ../bun.lock .
COPY ../pnpm-workspace.yaml .
COPY ../pnpm-lock.yaml .

# pnpmで全依存・型定義を物理展開
RUN pnpm install --frozen-lockfile

# Bunで依存インストール（1回だけ）
RUN rm -f package-lock.json pnpm-lock.yaml && bun install --force --hoist && \
    # .binディレクトリが必要な場合は明示的に作成
    mkdir -p /app/node_modules/.bin

### 2) API 開発用ステージ ###
FROM deps AS api-dev
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
ENV PATH="/root/.bun/bin:$PATH"
ENV NODE_PATH="/app/node_modules"

ENV NODE_ENV=development
EXPOSE 3001
CMD ["node", "/app/node_modules/.bin/nest", "start", "--watch", "--root", "apps/api"]

### 3) Web 開発用ステージ ###
FROM deps AS web-dev
WORKDIR /app/apps/web
COPY --from=deps /app/node_modules /app/node_modules
ENV PATH="/root/.bun/bin:$PATH"
ENV NODE_PATH="/app/node_modules"

ENV NODE_ENV=development
EXPOSE 3000
CMD ["bun", "run", "dev"]

### 4) マイグレーション実行ステージ ###
FROM deps AS migrator
WORKDIR /app/packages/db
COPY --from=deps /app/node_modules /app/node_modules
ENV PATH="/root/.bun/bin:$PATH"
ENV NODE_PATH="/app/node_modules"

USER root
RUN apk add --no-cache netcat-openbsd postgresql-client

ENTRYPOINT ["sh", "-c", "\
  echo '⏳ Waiting for DB…'; \
  until nc -z db 5432; do sleep 1; done; \
  echo '✅ DB is up, running migrations'; \
  bun run migrate; \
  bun run migrate:push; \
  PGPASSWORD=$POSTGRES_PASSWORD psql -h db -U $POSTGRES_USER -d $POSTGRES_DB -f /docker-entrypoint-initdb.d/init-seed-data.sql; \
  bun run seed; \
"]
