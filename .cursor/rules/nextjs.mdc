---
description: 
globs: 
alwaysApply: true
---
---

description: Apply this rule to the entire repository
globs:

* "apps/web/\*\*"
* "\*.tsx"
* "\*.ts"
  alwaysApply: true

---

まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### ディレクトリ構造例

```text
src/
├── app/                    # ルーティングとページコンポーネント
│   ├── (marketing)/       # ランディングページ、プライシング、お問い合わせなど
│   │   ├── about/
│   │   ├── pricing/
│   │   └── contact/
│   ├── (dashboard)/       # ログイン後のメイン機能
│   │   ├── projects/
│   │   ├── settings/
│   │   └── profile/
│   └── api/               # APIルート
│
├── components/            # Reactコンポーネント
│   ├── common/           # 共通コンポーネント
│   │   ├── buttons/
│   │   ├── forms/
│   │   ├── icons/
│   │   └── typography/
│   ├── features/         # 機能別コンポーネント
│   │   ├── dashboard/    # ダッシュボード関連
│   │   └── marketing/    # マーケティングページ関連
│   └── layouts/          # レイアウトコンポーネント
│       ├── marketing/
│       └── dashboard/
│
├── hooks/                # カスタムフック
│   ├── auth/
│   ├── form/
│   └── query/
│
├── lib/                  # ユーティリティ関数
│   ├── constants/        # 定数
│   │   ├── config/
│   │   └── messages/
│   ├── types/           # 型定義
│   └── utils/           # ヘルパー関数
│       ├── date/
│       ├── format/
│       └── validation/
│
├── dal/                  # Data Access Layer
│   ├── auth/
│   └── projects/
│
└── public/               # 静的アセット
    ├── images/
    │   ├── marketing/
    │   └── dashboard/
    ├── fonts/
    └── icons/
```

### 命名規則

* ページコンポーネント: `page.tsx`
* レイアウトコンポーネント: `layout.tsx`
* ローディング状態: `loading.tsx`
* エラーハンドリング: `error.tsx`
* 404 ページ: `not-found.tsx`

## 2. コンポーネント設計

### Server Components

* **デフォルトで Server Components を使用**
* **データフェッチングを含むコンポーネントは Server Components で実装**
* SEO 対応が必要なコンポーネントは Server Components で実装

### Client Components

以下の場合のみ Client Components を使用:

* ブラウザ API を使用する場合
* イベントリスナーが必要な場合
* React hooks を使用する場合
* クライアントサイドの状態管理が必要な場合

#### 'use client' ディレクティブ

```typescript
"use client";
// クライアントコンポーネントの先頭に記述
```

## 3. API実装

* **データフェッチ用の GET API は極力作成しないでください**。サーバーコンポーネントでのデータフェッチを強く推奨します。
* `app/api` ディレクトリ内に API エンドポイントを作成
* HTTP メソッドは **POST / PATCH / PUT / DELETE** のみ

```typescript
// app/api/articles/route.ts
import { NextResponse } from "next/server";

// POST: 新規記事の作成
export async function POST(request: Request) {
  try {
    const data = await request.json();
    const article = await prisma.article.create({
      data,
    });
    return NextResponse.json(article, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}
```

### クライアントサイドでのユーザーデータ操作

* `fetch` を使用して API を呼び出し
* エラーハンドリングとローディング状態を適切に管理

```typescript
// components/articles/create-article.tsx
"use client";

export async function createArticle(data: ArticleData) {
  try {
    const response = await fetch("/api/articles", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error("API request failed");
    }

    return await response.json();
  } catch (error) {
    console.error("Error creating article:", error);
    throw error;
  }
}
```

### キャッシュと再検証

```typescript
// ISRの場合
fetch(url, { next: { revalidate: 3600 } }); // 1時間ごとに再検証

// キャッシュを無効化する場合
fetch(url, { cache: "no-store" });
```

### エラーハンドリング

* API レスポンスには適切なステータスコードとエラーメッセージを含める
* クライアントサイドで try‑catch を用いて例外を処理

### セキュリティ

* API ルートでは認証・認可を必ずチェック
* 入力値のバリデーションを徹底
* 必要に応じてレートリミットを実装

## 4. パフォーマンス最適化

### 画像最適化

```typescript
import Image from "next/image";

<Image
  src="/path/to/image.jpg"
  alt="説明"
  width={800}
  height={600}
  priority
/>
```

### スクリプト最適化

```typescript
import Script from "next/script";

<Script src="https://example.com/script.js" strategy="lazyOnload" />;
```

## 5. UI 状態・エラーハンドリング

* `loading.tsx` でローディング状態を管理
* `error.tsx` でユーザーフレンドリーなエラーメッセージを表示
* Suspense を活用して細粒度でローディングを制御

## 6. 型安全性

### TypeScript 設定

```json
{
  "compilerOptions": {
    "strict": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### API ルートの型定義例

```typescript
type ResponseData = {
  message: string;
};
```

## 7. セキュリティ

* 機密情報は `.env` に保存。
* 公開してよい環境変数は `NEXT_PUBLIC_` プレフィックスを使用。
* `next.config.js` で CSP 等のヘッダーを設定。

## 8. デプロイメント

* Amplify / Vercel など本番環境では必ず `next build` を実行。
* 適切なキャッシュ戦略を有効化。
* 環境変数を環境ごとに安全に管理。

## 9. メンテナンス

* 依存パッケージを定期的に更新し、脆弱性をチェック。
* Core Web Vitals をモニタリングし、パフォーマンスを継続的に改善。
